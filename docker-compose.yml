version: "3"

networks:
  radio:
    external: false

volumes:
  cache:
    external: false
  shares:
    external: false

services:
  kawa:
    build:
      context: .
      dockerfile: ./docker/kawa/Dockerfile
      args:
        - KAWA_LOG_ARG=${KAWA_LOG}
        - KAWA_STREAM_PORT=${KAWA_STREAM_PORT}
        - KAWA_API_PORT=${KAWA_API_PORT}
        - KAWA_STREAM_NAME=${KAWA_STREAM_NAME}
        - KAWA_RANDOM_SONG_URL=${KAWA_RANDOM_SONG_URL}
        - KAWA_NOW_PLAYING_URL=${KAWA_NOW_PLAYING_URL}
        - KAWA_NEXT_RANDOM_URL=${KAWA_NEXT_RANDOM_URL}
    container_name: kawa
    restart: always
    read_only: true
    security_opt:
      - no-new-privileges:true
    networks:
      - radio
    volumes:
      - cache:/cache:ro
      - ${DATA_MOUNT_PATH}:${DATA_MOUNT_PATH}:ro
    depends_on:
      - api
      - dj

  api:
    build:
      context: .
      dockerfile: ./docker/stewdio-api/Dockerfile
      args:
        - KAWA_API_PORT=${KAWA_API_PORT}
        - STEWDIO_API_PORT=${STEWDIO_API_PORT}
        - ACOUSTID_API_KEY=${ACOUSTID_API_KEY}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_NAME=${DB_NAME}
        - DATA_MOUNT_PATH=${DATA_MOUNT_PATH}
    container_name: api
    environment:
      - STEWDIO_API_THREADS=${STEWDIO_API_THREADS}
      - STEWDIO_API_PORT=${STEWDIO_API_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    restart: always
    read_only: true
    security_opt:
      - no-new-privileges:true
    networks:
      - radio
    volumes:
      - ${DATA_MOUNT_PATH}:${DATA_MOUNT_PATH}:ro
    depends_on:
      - db
    tmpfs:
      - /tmp

  fpm:
    build:
      context: .
      dockerfile: ./docker/fpm/Dockerfile
      args:
        - STEWDIO_API_PORT=${STEWDIO_API_PORT}
        - SITE_HOSTNAME=${SITE_HOSTNAME}
        - DEFAULT_API_KEY=${DEFAULT_API_KEY}
        - LASTFM_API_KEY=${LASTFM_API_KEY}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_NAME=${DB_NAME}
        - DB_NAME_TORRENTS=${DB_NAME_TORRENTS}
    container_name: fpm
    restart: always
    read_only: true
    security_opt:
      - no-new-privileges:true
    networks:
      - radio
    volumes:
      - ${DATA_MOUNT_PATH}:${DATA_MOUNT_PATH}:ro
    depends_on:
      - db
      - api
    tmpfs:
      - /tmp

  bot:
    build:
      context: .
      dockerfile: ./docker/radio-ircbot/Dockerfile
      args:
        - STEWDIO_API_PORT=${STEWDIO_API_PORT}
        - KAWA_STREAM_PORT=${KAWA_STREAM_PORT}
        - KAWA_API_PORT=${KAWA_API_PORT}
        - DATA_MOUNT_PATH=${DATA_MOUNT_PATH}
        - SITE_HOSTNAME=${SITE_HOSTNAME}
        - DEFAULT_API_KEY=${DEFAULT_API_KEY}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_NAME=${DB_NAME}
        - DB_NAME_TORRENTS=${DB_NAME_TORRENTS}
        - IRC_SERVER_HOST=${IRC_SERVER_HOST}
        - IRC_SERVER_PORT=${IRC_SERVER_PORT}
        - IRC_SERVER_PASS=${IRC_SERVER_PASS}
        - BOT_USE_SATSUKI=${BOT_USE_SATSUKI}
        - BOT_USER=${BOT_USER}
        - BOT_NICK=${BOT_NICK}
        - BOT_PASSWORD=${BOT_PASSWORD}
        - BOT_KEYID=${BOT_KEYID}
        - BOT_RADIO_CHANNEL=${BOT_RADIO_CHANNEL}
        - BOT_NP_CHANNEL=${BOT_NP_CHANNEL}
    restart: always
    read_only: true
    security_opt:
      - no-new-privileges:true
    container_name: bot
    networks:
      - radio
    volumes:
      - cache:/cache:rw
      - shares:/shares:rw
      - ${DATA_MOUNT_PATH}:${DATA_MOUNT_PATH}:ro
    depends_on:
      - api
      - kawa

  dj:
    build:
      context: .
      dockerfile: ./docker/radio-dj/Dockerfile
      args:
        - STEWDIO_API_PORT=${STEWDIO_API_PORT}
        - KAWA_STREAM_PORT=${KAWA_STREAM_PORT}
        - KAWA_API_PORT=${KAWA_API_PORT}
        - DEFAULT_API_KEY=${DEFAULT_API_KEY}
        - DB_USER=${DB_USER}
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_NAME=${DB_NAME}
        - DB_NAME_TORRENTS=${DB_NAME_TORRENTS}
    restart: always
    read_only: true
    security_opt:
      - no-new-privileges:true
    container_name: dj
    networks:
      - radio
    depends_on:
      - api

  fcmm:
    image: fcmm
    build: https://git.gammaspectra.live/S.O.N.G/FinalCommander.git#master
    restart: always
    container_name: fcmm
    read_only: true
    security_opt:
      - no-new-privileges:true
    networks:
      - radio
    environment:
      - PRIVATE_KEY=${FINAL_COMMANDER_PRIVATE_KEY}
    command: >-
      -listen ":7777"
      -servers "${ORBITAL_BEAT_SERVERS}"
    tmpfs:
      - /tmp

  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
      args:
        ENABLED_MODULES: brotli
        STEWDIO_API_PORT: ${STEWDIO_API_PORT}
        SITE_HOSTNAME: ${SITE_HOSTNAME}
        KAWA_STREAM_PORT: ${KAWA_STREAM_PORT}
        DATA_MOUNT_PATH: ${DATA_MOUNT_PATH}
    restart: always
    container_name: nginx
    read_only: true
    security_opt:
      - no-new-privileges:true
    networks:
      - radio
    volumes:
      - shares:/shares:ro
      - cache:/cache:rw
      - ${DATA_MOUNT_PATH}:${DATA_MOUNT_PATH}:ro
    ports:
      - "${SITE_PORT}:443"
    depends_on:
      - fpm
      - kawa
      - fcmm
    tmpfs:
      - /run
      - /var/cache/nginx
      - /tmp

  db:
    image: postgres:13.2
    restart: always
    container_name: db
    shm_size: 1g
    read_only: true
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES="${DB_NAME}","${DB_NAME_TORRENTS}"
      - DB_NAME_TORRENTS=${DB_NAME_TORRENTS}
    networks:
      - radio
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname \"postgres://${DB_USER}:${DB_PASSWORD}@db/${DB_NAME}\"" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "${SITE_DB_PORT}:5432"
    volumes:
      - ./docker/postgres/postgresql.conf:/etc/postgresql.conf:ro
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ./docker/postgres/schema:/schema:ro
      - ./data/db:/var/lib/postgresql/data:rw
    command: postgres -c config_file=/etc/postgresql.conf
    tmpfs:
      # For read-only filesystem, need to create a volume/tmpfs for PostgreSQL to run its much
      # needed configuration. The read-only flag does not make volumes and tmpfs read-only.
      - /tmp
      - /run
      - /run/postgresql